import asyncio
import traceback
from typing import Optional
from random import randint
from pyrogram.types import Message, ChatPrivileges
from pyrogram import Client, filters
from pyrogram.raw.functions.channels import GetFullChannel
from pyrogram.raw.functions.messages import GetFullChat
from pyrogram.raw.types import InputGroupCall, InputPeerChannel, InputPeerChat, InputPeerUser
from YukkiMusic.utils.database import *
from pyrogram.raw.functions.phone import CreateGroupCall, DiscardGroupCall
from pyrogram.errors import (
    ChannelsTooMuch,
    ChatAdminRequired,
    FloodWait,
    InviteRequestSent,
    UserAlreadyParticipant,
    UserNotParticipant,
)
from YukkiMusic import app, userbot
from typing import List, Union
from pyrogram import filters
from YukkiMusic.core.call import Yukki
from pyrogram.types import VideoChatEnded, Message
from ntgcalls import TelegramServerError
from pytgcalls import PyTgCalls
from pytgcalls.exceptions import NoActiveGroupCall
from pytgcalls.types import (
    ChatUpdate,
    GroupCallConfig,
    MediaStream,
    StreamEnded,
)
from config import BANNED_USERS
async def safe_join_call(assistant, chat_id, audio_path):
   # \"\"\"Safe method to join call with multiple API attempts\"\"\"
    # Prepare audio stream
    if MediaStream != str:
        try:
            stream = MediaStream(audio_path)
        except:
            stream = audio_path
    else:
        stream = audio_path
    
    # Try different join methods
    join_methods = ["join_group_call", "join_call", "play", "start_call"]
    
    for method_name in join_methods:
        if hasattr(assistant, method_name):
            try:
                method = getattr(assistant, method_name)
                await method(chat_id, stream)
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è {method_name} failed: {e}")
                continue
    
    return False

async def safe_leave_call(assistant, chat_id):
   # \"\"\"Safe method to leave call with multiple API attempts\"\"\"
    leave_methods = ["leave_group_call", "leave_call", "stop", "disconnect"]
    
    for method_name in leave_methods:
        if hasattr(assistant, method_name):
            try:
                await getattr(assistant, method_name)(chat_id)
                return True
            except:
                continue
    
    return False

############################################

@app.on_message(filters.command("vcinfo", prefixes=["/", "!"]) & filters.group & ~BANNED_USERS)
async def strcall(client, message):
    assistant = await group_assistant(Yukki, message.chat.id)
    userbot = await get_assistant(message.chat.id)
    userbot_id = userbot.id

    try:
        # Tham gia call b·∫±ng assistant
        await safe_join_call(assistant, message.chat.id, "./call.mp3")

        try:
            participants = await assistant.get_participants(message.chat.id)
        except Exception as e:
            await message.reply(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi tham gia: {e}")
            return

        text = "- Nh·ªØng ng∆∞·ªùi ƒëang tham gia cu·ªôc g·ªçi nh√≥m ü´∂ :\n\n"
        index = 1

        for participant in participants:
            try:
                user = await userbot.get_users(participant.user_id)
                if user.id == userbot_id:
                    continue

                mic = "ƒêang m·ªü mic üó£" if not participant.muted else "ƒêang t·∫Øt mic üîï"
                try:
                    name = user.mention
                except Exception:
                    name = f"`{user.first_name}`"

                text += f"{index} ‚û§ {name} ‚û§ {mic}\n"
                index += 1

            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin user_id {participant.user_id}: {e}")
                continue

        text += f"\nS·ªë ng∆∞·ªùi ƒëang tham gia (kh√¥ng t√≠nh bot): {index - 1}"
        await message.reply(text)
        await asyncio.sleep(7)
        await safe_leave_call(assistant, message.chat.id)

    except Exception as e:
        error_msg = str(e).lower()
        if "no active" in error_msg or "notincall" in error_msg:
            await message.reply("‚ùå Hi·ªán kh√¥ng c√≥ cu·ªôc g·ªçi nh√≥m n√†o ƒëang di·ªÖn ra.")
        elif "telegram server" in error_msg:
            await message.reply("‚ö†Ô∏è M√°y ch·ªß Telegram ƒëang g·∫∑p s·ª± c·ªë, h√£y th·ª≠ l·∫°i sau.")
        elif "already joined" in error_msg:
            # Khi ƒë√£ join r·ªìi th√¨ ch·ªâ c·∫ßn l·∫•y danh s√°ch
            try:
                participants = await assistant.get_participants(message.chat.id)
                text = "- Nh·ªØng ng∆∞·ªùi ƒëang tham gia cu·ªôc g·ªçi nh√≥m ü´∂ :\n\n"
                index = 1
                for participant in participants:
                    try:
                        user = await userbot.get_users(participant.user_id)
                        if user.id == userbot_id:
                            continue
                        mic = "ƒêang m·ªü mic üó£" if not participant.muted else "ƒêang t·∫Øt mic üîï"
                        name = user.mention if hasattr(user, "mention") else f"`{user.full_name}`"
                        text += f"{index} ‚û§ {name} ‚û§ {mic}\n"
                        index += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y user: {e}")
                        continue
                text += f"\nS·ªë ng∆∞·ªùi ƒëang tham gia (kh√¥ng t√≠nh bot): {index - 1}"
                await message.reply(text)
            except Exception:
                await message.reply("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi tham gia.")
                print(traceback.format_exc())
        else:
            await message.reply(f"üí• L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            print(traceback.format_exc())



other_filters = filters.group  & ~filters.via_bot & ~filters.forwarded
other_filters2 = (
    filters.private  & ~filters.via_bot & ~filters.forwarded
)


def command(commands: Union[str, List[str]]):
    return filters.command(commands, "")


  ################################################
async def adminbot(m: Message):
    try:
        bot_id = (await userbot.get_me()).id
        bot_member = await client.get_chat_member(message.chat.id, bot_id)

        if bot_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            return await message.reply_text("‚ùå Bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n trong nh√≥m n√†y.")

        if not bot_member.privileges or not bot_member.privileges.can_manage_video_chats:
            return await message.reply_text("‚ö†Ô∏è Bot l√† qu·∫£n tr·ªã vi√™n nh∆∞ng kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω video chats.")
    except Exception as e:
        return await message.reply_text(f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn c·ªßa bot: {e}")


async def get_group_call(
    client: Client, message: Message, err_msg: str = ""
) -> Optional[InputGroupCall]:
    assistant = await get_assistant(message.chat.id)
    chat_peer = await assistant.resolve_peer(message.chat.id)
    if isinstance(chat_peer, (InputPeerChannel, InputPeerChat)):
        if isinstance(chat_peer, InputPeerChannel):
            full_chat = (
                await assistant.invoke(GetFullChannel(channel=chat_peer))
            ).full_chat
        elif isinstance(chat_peer, InputPeerChat):
            full_chat = (
                await assistant.invoke(GetFullChat(chat_id=chat_peer.chat_id))
            ).full_chat
        if full_chat is not None:
            return full_chat.call
    await app.send_message("**Cu·ªôc g·ªçi nh√≥m ƒëang b·ªã t·∫Øt** {err_msg}")
    return False

@app.on_message(filters.command("mocall", prefixes=["/", "!"]) & filters.group & ~BANNED_USERS)
async def start_group_call(c: Client, m: Message):
    chat_id = m.chat.id
    assistant = await get_assistant(chat_id)
    ass = await assistant.get_me()
    assid = ass.id
    assum = ass.username
    bot_member = await app.get_chat_member(chat_id, assid)
    if assistant is None:
        await app.send_message(chat_id, "L·ªói userbot")
        return
    try:
        if bot_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            return await app.send_message(f"""‚ùå Userbot kh√¥ng c√≥ quy·ªÅn m·ªü call trong nh√≥m n√†y. Th√™m userbot {assum} l√†m qtv v·ªõi quy·ªÅn qu·∫£n l√Ω call.""")
        if not bot_member.privileges or not bot_member.privileges.can_manage_video_chats:
            return await app.send_message(f"""‚ö†Ô∏è Userbot {assum} l√† qu·∫£n tr·ªã vi√™n nh∆∞ng kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω call.""")
    except Exception as e:
        return await app.send_message(f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn c·ªßa userbot: {e}")

    msg = await app.send_message(chat_id, "ƒêang m·ªü cu·ªôc g·ªçi nh√≥m..")
    try:
        if group_call := (await get_group_call(assistant, m)):  
            return await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c m·ªü tr∆∞·ªõc ƒë√≥.")
    # N·∫øu ch∆∞a c√≥ trong storage, th·ª≠ l·∫•y th√¥ng tin chat ƒë·ªÉ l∆∞u v√†o storage
        await assistant.get_chat(chat_id)
        peer = await assistant.resolve_peer(chat_id)
        await assistant.invoke(
            CreateGroupCall(
                peer=InputPeerChannel(
                    channel_id=peer.channel_id,
                    access_hash=peer.access_hash,
                ),
                random_id=assistant.rnd_id() // 9000000000,
            )
        )
        await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng‚ö°Ô∏è~!")

    except ChatAdminRequired:
      try:    
        await app.promote_chat_member(chat_id, assid, privileges=ChatPrivileges(
                can_manage_chat=False,
                can_delete_messages=False,
                can_manage_video_chats=True,
                can_restrict_members=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False,
                can_promote_members=False,
        ),)
        peer = await assistant.resolve_peer(chat_id)
        if group_call := (await get_group_call(assistant, m)):  
            return await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c m·ªü tr∆∞·ªõc ƒë√≥.")
        await assistant.invoke(
            CreateGroupCall(
                peer=InputPeerChannel(
                    channel_id=peer.channel_id,
                    access_hash=peer.access_hash,
                ),
                random_id=assistant.rnd_id() // 9000000000,
            )
        )
        await app.promote_chat_member(chat_id, assid, privileges=ChatPrivileges(
            can_manage_chat=False,
            can_delete_messages=False,
            can_manage_video_chats=False,
            can_restrict_members=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False,
            can_promote_members=False,
            ),
        )                              
        await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng‚ö°Ô∏è~!")
      except:
         await msg.edit_text("C·∫•p quy·ªÅn qu·∫£n l√Ω cu·ªôc g·ªçi nh√≥m cho bot, userbot v√† th·ª≠ l·∫°i‚ö°")

@app.on_message(filters.command("tatcall", prefixes=["/", "!"]) & filters.group & ~BANNED_USERS)
async def stop_group_call(c: Client, m: Message):
    chat_id = m.chat.id
    assistant = await get_assistant(chat_id)
    ass = await assistant.get_me()
    assid = ass.id
    assum = ass.username
    bot_member = await app.get_chat_member(chat_id, assid)
    if assistant is None:
        await app.send_message(chat_id, "Userbot l·ªói")
        return
    try:
        if bot_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            return await app.send_message(f"""‚ùå Userbot kh√¥ng c√≥ quy·ªÅn m·ªü call trong nh√≥m n√†y. Th√™m userbot {assum} l√†m qtv v·ªõi quy·ªÅn qu·∫£n l√Ω call.""")
        if not bot_member.privileges or not bot_member.privileges.can_manage_video_chats:
            return await app.send_message(f"""‚ö†Ô∏è Userbot {assum} l√† qu·∫£n tr·ªã vi√™n nh∆∞ng kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω call.""")
    except Exception as e:
        return await app.send_message(f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra quy·ªÅn c·ªßa userbot: {e}")

    msg = await app.send_message(chat_id, "ƒêang t·∫Øt cu·ªôc g·ªçi nh√≥m..")
    try:
        if not (group_call := (await get_group_call(assistant, m))):  
            return await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫Øt tr∆∞·ªõc ƒë√≥.")
        await assistant.invoke(DiscardGroupCall(call=group_call))
        await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫Øt th√†nh c√¥ng‚ö°Ô∏è~!")
    except Exception as e:
      if "GROUPCALL_FORBIDDEN" in str(e):
       try:    
         await app.promote_chat_member(chat_id, assid, privileges=ChatPrivileges(
                can_manage_chat=False,
                can_delete_messages=False,
                can_manage_video_chats=True,
                can_restrict_members=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False,
                can_promote_members=False,
             ),
         )
         if not (group_call := (await get_group_call(assistant, m))):  
             return await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫Øt tr∆∞·ªõc ƒë√≥")
         await assistant.invoke(DiscardGroupCall(call=group_call))
         await app.promote_chat_member(chat_id, assid, privileges=ChatPrivileges(
            can_manage_chat=False,
            can_delete_messages=False,
            can_manage_video_chats=False,
            can_restrict_members=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False,
            can_promote_members=False,
            ),
         )            
         await msg.edit_text("Cu·ªôc g·ªçi nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫Øt th√†nh c√¥ng‚ö°Ô∏è~!")
       except:
         await msg.edit_text("Bot thi·∫øu quy·ªÅn qu·∫£n l√Ω cu·ªôc g·ªçi nh√≥m")
